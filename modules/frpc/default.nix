{ lib, config, pkgs, ... }:
let 
  cfg = config.services.frpc;
  generateFrpcEnvFile = pkgs.writeShellScriptBin "genFrpcEnvFile" ''
    #!${pkgs.runtimeShell} -eu

    export PATH=${pkgs.lib.makeBinPath [ config.nix.package pkgs.systemd pkgs.k3s pkgs.gawk pkgs.curl pkgs.kubernetes-helm ]}:$PATH
    # Following systemd's machine-id recomendations we don't want to expose user's
    # Machine IDs, hence we hash it with a cryptographic keyed hash function, using a
    # fixed, application-specific key. That way the ID will be properly unique, and
    # derived in a constant way from the machine ID but there will be no way to retrieve
    # the original machine ID from the application-specific one.
    # See here for more details: https://man7.org/linux/man-pages/man5/machine-id.5.html
    hashedMachineId=$(systemd-id128 machine-id --app-specific=${cfg.appSpecificKey})
    # Create environment file that will be read by the frpc systemd service.
    # When systemd starts frpc, some of parameters in the /etc/frp/frpc.ini config
    # will be populated with corresponding variables from this env file.
    echo "MACHINE_ID=$hashedMachineId" > /etc/frp/frpc_env
  '';
  frpcConfigIniRule = import ./frpc-config.nix { inherit config pkgs; };
in
{
  options.services.frpc = {
    enable = lib.mkEnableOption "frpc service";

    relayServer = lib.mkOption {
      description = ''
        LirePod Relay host name.
        This should be a hostname or an IP address of a frps host to connect to. 
      '';
      type = lib.types.str;
      default = "ee.relay.librepod.org";
    };

    authToken = lib.mkOption {
      description= "Authentication token to use for frpc connection";
      type = lib.types.str;
      default = "Aloha, LibrePod!";
    };

    appSpecificKey = lib.mkOption {
      description = "This is a string generated by `systemd-id128 -p new` command";
      type = lib.types.str;
      default = "b68d956f085444af8be05da0602bc9c3";
    };
  };

  config = lib.mkIf cfg.enable {
    # Use the v0.48.0 version of frp.
    nixpkgs.overlays = [
      (self: super: {
        frp = self.callPackage ./frp.nix {};
      })
    ];

    environment.systemPackages = [ pkgs.frp generateFrpcEnvFile ];

    systemd.tmpfiles.rules = [ frpcConfigIniRule ];

    systemd.services.frpc = {
      description = "Connect to LibrePod frps server at ${toString cfg.relayServer}";
      wantedBy = [ "multi-user.target" ];
      after = [ "multi-user.target" ];
      requires = [ "network.target" ];
      restartIfChanged = true;
      unitConfig.X-StopOnRemoval = true;
      serviceConfig = {
        Type = "simple";
        RemainAfterExit = true;
        Restart = "on-failure";
        RestartSec = "5s";
        # Env file is prefixed with "-", which indicates that if the file does not
        # exist, it will not be read and no error or warning message is logged.
        EnvironmentFile = "-/etc/frp/frpc_env";
        ExecStartPre = "${generateFrpcEnvFile}/bin/genFrpcEnvFile";
        ExecStart = "${pkgs.frp}/bin/frpc -c /etc/frp/frpc.ini";
        ExecReload = "${pkgs.frp}/bin/frpc reload -c /etc/frp/frpc.ini";
      };
    };
  };
}
